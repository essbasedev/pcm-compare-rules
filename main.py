from bs4 import BeautifulSoup
from extract_xml import ExtractXML
import lxml
import csv
import os

final_output = []


# Write the ecv_export list to csv file
def write_csv(file_name, list_name):
    with open(file_name, 'a') as csv_file:
        csv_writer = csv.writer(csv_file)
        count = 0
        for item in list_name:
            if count == 0:
                csv_writer.writerow(item)
                count += 1
            csv_writer.writerow(item.values())


def extract_xml_to_csv(job_name, file_no):
    # source_file = input(f'Input the source file path and name:\n')
    source_file = job_name.path

    output_file_name = source_file[:-3] + 'csv'
    if os.path.exists(output_file_name):
        os.remove(output_file_name)

    with open(source_file, 'r') as file:
        data = file.read()

    soup = BeautifulSoup(data, 'xml')
    parent_tag = soup.find_all('calculationProgramRuleSet')

    try:
        application_tag = soup.find_all('application')[1:2]
        application_name = application_tag[0].find('name').text
    except:
        application_name = '<unable to find>'
    job_name.application_name = application_name

    for index, ruleset in enumerate(parent_tag):
        job_name.ruleset_id = ruleset.find('ruleSetId').text
        job_name.ruleset_name = ruleset.find('mName').text
        job_name.ruleset_enabled = ruleset.find('mIsEnabled').text
        job_name.global_context = ruleset.find('mUseGlobalContext').text
        job_name.ruleset_sequence = ruleset.find('mSequence').text
        job_name.iterations = ruleset.find('mNumberOfIterations').text
        job_name.execution_mode = ruleset.find('mExecutionMode').text
        job_name.ruleset_summary.append({
            'Ruleset Name': job_name.ruleset_name,
            'Enabled': job_name.ruleset_enabled,
            'Global Context': job_name.global_context,
            'Sequence': job_name.ruleset_sequence,
            'Iterations': job_name.iterations,
        })

        ruleset_tag = ruleset.findChildren('mRules')
        for index, rule in enumerate(ruleset_tag):
            job_name.rule_id = rule.find('mRuleId').text
            job_name.rule_name = rule.find('mRuleName').text
            job_name.rule_enabled = rule.find('mIsEnabled').text
            job_name.rule_no = rule.find('mRuleMemberName').text
            job_name.rule_sequence = rule.find('mSequence').text
            job_name.ruleset_context = rule.find('UseRuleSet').text
            job_name.rule_type = rule.find('RuleType').text
            job_name.driver_selection = rule.find('driverSelectionType').text \
                if job_name.rule_type == "ALLOCATION" \
                else ''
            # driver_selection = rule.find('driverSelectionType').text
            job_name.allocation_amount = float(rule.find('allocationAmount').text)
            job_name.rule_summary.append({
                'Rule Name': job_name.rule_name,
                'Enabled': job_name.rule_enabled,
                'Rule No': job_name.rule_no,
                'Sequence': job_name.rule_sequence,
                'Ruleset Name': job_name.ruleset_name,
                'Ruleset Context': job_name.ruleset_context,
                'Rule Type': job_name.rule_type,
                'Driver Selection': job_name.driver_selection,
                'Allocation Amount': job_name.allocation_amount,
            })

            rule_tag = rule.find_all('dimensions')
            for index, dim in enumerate(rule_tag):
                job_name.dimension = dim.find('dimName').text
                job_name.find_dimension_members('context', 'Context', 'Context Filter', dim)
                job_name.find_dimension_members('driver', 'Driver', 'Driver Filter', dim)
                job_name.find_dimension_members('offSet', 'Offset', 'Offset Filter', dim)
                job_name.find_dimension_members('destination', 'Destination', 'Destination Filter', dim)
                job_name.find_dimension_members('source', 'Source', 'Source Filter', dim)

    job_name.add_to_csv_export(job_name.ruleset_summary, application_name, file_no, 'Ruleset')
    job_name.add_to_csv_export(job_name.rule_summary, application_name, file_no, 'Rule')
    job_name.add_to_csv_export(job_name.rule_detail, application_name, file_no, 'Dimension')
    # write_csv(output_file_name, job_name.csv_export)

# Call the class to execute the extraction functions.
def compare_files(file1, file2):
    global final_output
    if len(final_output) > 0:
        final_output = []

    # Initiate class
    job1 = ExtractXML(file1, 'file1')
    job2 = ExtractXML(file2, 'file2')

    extract_xml_to_csv(job1, 'file1')
    extract_xml_to_csv(job2, 'file2')

    # compare the outputs generated by two xml files
    temp_list1 = []
    temp_list2 = []

    # Store last 4 fields in a temp list for comparison
    for i in job1.csv_export:
        temp_list1.append({
            'Rule No': i['Rule No'],
            'Dimension': i['Dimension'],
            'Component': i['Component'],
            'Value': i['Value'],
        })

    # Store last 4 fields in a temp list for comparison
    for i in job2.csv_export:
        temp_list2.append({
            'Rule No': i['Rule No'],
            'Dimension': i['Dimension'],
            'Component': i['Component'],
            'Value': i['Value'],
        })

    # Loop through job1's csv output
    for i in range(len(job1.csv_export)):
        # Check values in temp1 is there in temp2
        if temp_list1[i] not in temp_list2:
            # if it is not there get the relevant value from job1
            final_output.append(job1.csv_export[i])

    for i in range(len(job2.csv_export)):
        if temp_list2[i] not in temp_list1:
            final_output.append(job2.csv_export[i])

    # print(final_output)
    # write_csv('sample/output.csv', final_output)

    # delete xml file after all the steps.
    if os.path.exists(file1):
        os.remove(file1)
    if os.path.exists(file2):
        os.remove(file2)
